#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include <time.h>
#define MAX_QUEUE 50
#define MAX 20
char new_str[MAX] = { "\0" };
 
	char Queue[MAX_QUEUE];
	char ac[MAX_QUEUE];
	int front = 0, rear = 0;

	int isFull() {
		return rear == MAX_QUEUE && front == 0;
	}

	int isEmpty() {
		return front == rear;
	}

	void Add(char* queue, char item) {
		if (isFull()) {
			printf("Queue is full!\n");
			return;
		}
		queue[rear++] = item;
	}

	void Delete(char* queue) {
		if (isEmpty()) {
			printf("Queue is empty!\n");
			return;
		}
		queue[front++];
	}

	void printQueue(char* queue) {
		if (isEmpty()) {
			printf("Queue is empty!\n");
			return;
		}
		printf("Queue: ");
		for (int i = front; i < rear; i++)
			printf("%c ", queue[i]);
		printf("\n");
	}
	

    void reverse(char str[MAX]) {
        int i, j;
        char c;
        for (i = 0, j = strlen(str) - 1; i < j; ++i, --j)
            c = str[i], str[i] = str[j], str[j] = c;
    }
    int compare(char op) {
        switch (op) {
        case '+':
        case '-':
            return 1;
        case '*':
        case '/':
        case '%':
            return 2;
        default:
            return 0;
        }
    }
    void Prefix(char* str, char* new_str) {
        char stack[MAX];
        int top = 0, j = 0, i;
        for (i = strlen(str) - 1; i >= 0; i--) {

            switch (str[i]) {
            case '+':
            case '-':
            case '*':
            case '/':
            case '%':
                while (compare(str[i]) < compare(stack[top])) {
                    new_str[j++] = stack[top--];
                }

                stack[++top] = str[i];

                continue;
            case ')':
                stack[++top] = str[i];
                continue;

            case '(':
                while (stack[top] != ')') {
                    new_str[j++] = stack[top--];
                }
                top--;
                continue;

            default:
                new_str[j++] = str[i];
                continue;

            }
        }
        while (top != 0) {
            new_str[j++] = stack[top--];
        }
    }

    void Infix_to_Prefix(char str[]) {

        Prefix(str, new_str);
        reverse(new_str);
    }
    int get_value(int op1, int op2, char op) {
        //printf("(%d %c %d)\n", op1, op, op2);
        switch (op) {
        case '+':
            return op1 + op2;
        case '-':
            return op1 - op2;
        case '*':
            return op1 * op2;
        case '/':
            return op1 / op2;
        case '%':
            return op1 % op2;
        default:
            return 0;
        }
    }
    void Calculation(char* str) {
        char stack[MAX];
        int top = 0, j = 0, i;
        for (i = strlen(str) - 1; i >= 0; i--) {
            // printf("\n%c\n", str[i]);
            switch (str[i]) {
            case '+':
            case '-':
            case '*':
            case '/':
            case '%':
                stack[top - 1] = get_value(stack[top], stack[top - 1], str[i]);
                top--;
                continue;

            default:
                stack[++top] = str[i] - 48;
                continue;
                
            }
        }
        int f = stack[top];
        float b = (float)f;
        printf("%f\n", b);
        //結果
    }
    int main() {
        char str1[MAX];
        fgets(str1, 20, stdin);
        Infix_to_Prefix(str1); 
        Calculation(new_str);
        

        return 0;
    }